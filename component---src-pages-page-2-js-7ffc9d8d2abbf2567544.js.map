{"version":3,"sources":["webpack:///./src/components/DataBuilder/index.js","webpack:///./src/components/DataBuilder/DataBuilder.js","webpack:///./src/pages/page-2.js"],"names":["DataBuilder","children","data","useState","loading","setLoading","content","interval","min","max","useEffect","ref","arrangedContent","counter","allWorldHappiness2015Json","edges","map","i","score","node","Happiness_Score","index","Math","round","from","to","value","console","log","SecondPage"],"mappings":"uIACeA,ECGK,SAAC,GAAiB,EAAfC,SAAgB,IAC/BC,EAAI,OAD0B,EAaNC,oBAAS,GAAhCC,EAb6B,KAapBC,EAboB,OAcNF,mBAAS,IAAhCG,EAd6B,aAeJH,mBAAS,IAAlCI,EAf6B,aAgBdJ,mBAAS,IAAxBK,EAhB6B,aAiBdL,mBAAS,KAAxBM,EAjB6B,UA+CpC,OA5BAC,qBAAU,WACR,IAAIC,EAAM,GACNC,EAAkB,GACtB,GAAIR,EAAS,CACX,IAAIS,EAAU,EACdX,EAAKY,0BAA0BC,MAC5BC,KAAI,WAAuCC,GAAO,IAAlBC,EAAiB,EAA1CC,KAAQC,gBACRC,EAAQC,KAAKC,MAAML,EAAQX,GAC7BK,EAAgBS,GAAQT,EAAgBS,KACvCT,EAAgBS,GAAS,KAElC,IAAK,IAAIG,EAAOhB,EAAKgB,GAAQf,EAAKe,GAAQjB,EAAU,CAClD,IAAIkB,EAAKD,EAAOjB,EAAW,EAE3B,GADIkB,EAAKhB,IAAKgB,EAAKhB,GACfe,IAASC,EAAId,EAAI,GAAGc,GAAQ,MAC3B,CACH,IAAMC,EAAQd,EAAgBC,KAC9BF,EAAOa,EAAJ,IAAYC,GAAQC,GAAgB,GAI3CC,QAAQC,IAAI,CAAEhB,kBAAiBD,QAC/BN,GAAW,MAEZ,CAACH,EAAKY,0BAA0BC,QAEnCY,QAAQC,IAAItB,GAGV,oCACE,6CC3CSuB,UAJI,kBACjB,kBAAC,EAAD,Q","file":"component---src-pages-page-2-js-7ffc9d8d2abbf2567544.js","sourcesContent":["import DataBuilder from './DataBuilder'\nexport default DataBuilder\n","import React, { useEffect, useState } from 'react'\n// import PropTypes from 'prop-types'\nimport { useStaticQuery, graphql } from 'gatsby'\n\nconst DataBuilder = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query WorldHappinessQuery {\n      allWorldHappiness2015Json {\n        edges {\n          node {\n            Happiness_Score\n          }\n        }\n      }\n    }\n  `)\n\n  const [loading, setLoading] = useState(true)\n  const [content, setContent] = useState([])\n  const [interval, setInterval] = useState(2)\n  const [min, setMin] = useState(0)\n  const [max, setMax] = useState(10)\n\n  useEffect(() => {\n    let ref = {}\n    let arrangedContent = []\n    if (loading) {\n      let counter = 0\n      data.allWorldHappiness2015Json.edges\n        .map(({ node: { Happiness_Score: score } }, i) => {\n          const index = Math.round(score / interval)\n          if (arrangedContent[index]) arrangedContent[index]++\n          else arrangedContent[index] = 1\n        })\n      for (let from = min; from <= max; from += interval) {\n        let to = from + interval - 1\n        if (to > max) to = max\n        if (from === to) ref[`${to}`] = 0\n        else {\n          const value = arrangedContent[counter++]\n          ref[`${from}-${to}`] = value ? value : 0\n        }\n      }\n      // setContent()\n      console.log({ arrangedContent, ref })\n      setLoading(false)\n    }\n  }, [data.allWorldHappiness2015Json.edges])\n\n  console.log(content)\n\n  return (\n    <>\n      <h1>Hello world</h1>\n    </>\n  )\n}\n\nexport default DataBuilder\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport DataBuilder from \"../components/DataBuilder\"\n// import SEO from \"../components/seo\"\n\nconst SecondPage = () => (\n  <DataBuilder />\n)\n\nexport default SecondPage\n"],"sourceRoot":""}